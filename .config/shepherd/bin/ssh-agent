#!/usr/bin/env -S guile -s
!#

;; -*- scheme -*- vim:ft=scheme

(use-modules (ice-9 popen)
			 (ice-9 rdelim)
			 (ice-9 format)
			 (ice-9 regex)
			 (ice-9 ftw)
			 (ice-9 textual-ports)
			 (srfi srfi-1))

(when (string-null? (getenv "XDG_RUNTIME_DIR"))
  (exit 1))

(define runtime-dir (getenv "XDG_RUNTIME_DIR"))

(define (capture command)
  (let* ((stdin (open-input-pipe command))
		 (stdout (read-string stdin)))
	(close-pipe stdin) stdout))

(define (getenv-maybe varname default)
  (or (getenv varname) default))

(define (print str . rest)
  (display
   (apply format #f str rest)))

(define (printerr msg exitcode)
  (display
   (format #f
	"[\x1B[1;31mERROR\x1B[0m] ~a\n"))
  (quit exitcode))

(define (execf command . rest)
  (system (apply format #f command rest)))

(define (remove-nl str)
  (list->string
   (filter
	(lambda (c) (not (char=? c #\newline)))
	(string->list str))))

(define (remove-last-line filename)
  (let* ((content (call-with-input-file filename get-string-all))
		 (lines (string-split content #\newline))
		 (lines-without-last (if (string-suffix? content "\n")
								 (drop-right lines 2)
								 (drop-right lines 2)))
		 (new-content (string-join lines-without-last "\n")))
	(call-with-output-file filename
	  (lambda (handle)
		(put-string handle new-content)

		(when (string-suffix? content "\n")
		  (put-string handle "\n"))))))

(define (append-file str file)
  (let ((handle (open-file file "a")))
	(display str handle)
	(close-port handle)))

(define (backup-and-delete-file filename)
  (let ((dir (dirname filename)))
	(copy-file filename (format #f "~a/.backup.~a" dir (basename filename)))
	(delete-file filename)))

(define home-dir (getenv "HOME"))

(define xdg-cache
  (getenv-maybe "XDG_CACHE_HOME" (string-append home-dir "/.cache")))

(define ssh-cache
  (string-append xdg-cache "/ssh-agent"))

(define keyfile
  (string-append home-dir "/.ssh/key"))

(define socket-dir
  (string-append runtime-dir "/ssh-agent"))

(define socket-file
  (string-append socket-dir "/socket"))

(unless (file-exists? socket-dir)
  (print "~a does not exist, creating...\n" socket-dir)
  (mkdir socket-dir)
  (chmod socket-dir #o700))

(unless (file-exists? ssh-cache)
  (print "~a does not exist, creating...\n" ssh-cache)
  (mkdir ssh-cache))

(define ssh-agent-output
  (capture (format #f "ssh-agent -s -a ~a" socket-file)))

(define sh-ssh-info
  (string-append ssh-cache "/info.sh"))

(define pre-sh-ssh-info
  (string-append ssh-cache "/pre.sh"))

(define fish-ssh-info
  (string-append ssh-cache "/info.fish"))

(when (file-exists? fish-ssh-info)
  (delete-file fish-ssh-info))

(when (file-exists? pre-sh-ssh-info)
  (delete-file pre-sh-ssh-info))

(when (file-exists? sh-ssh-info)
  (delete-file sh-ssh-info))

(append-file ssh-agent-output pre-sh-ssh-info)

(remove-last-line pre-sh-ssh-info)

(define translated-fish
  (capture (format #f "cat ~a | tr '=' ' ' | sed 's|^|set -gx |g' | cut -d ';' -f1" pre-sh-ssh-info)))

(define transformed-ssh-sh-output
  (capture (format #f "cat ~a | cut -d';' -f1 | sed 's|^|export |g'" pre-sh-ssh-info)))

(append-file transformed-ssh-sh-output sh-ssh-info)
(append-file translated-fish fish-ssh-info)

(when (and (file-exists? socket-file) (file-exists? keyfile))
  (execf "SSH_AUTH_SOCK=~a ssh-add -q ~a" socket-file keyfile))

(delete-file pre-sh-ssh-info)

(when (string-null? (getlogin))
  (printerr "Couldn't find your username, exiting." 1))
  
(define ssh-agent-pid
  (remove-nl (capture (format #f "pgrep -u ~a -x ssh-agent" (getlogin)))))

(when (file-exists? (string-append socket-dir "/pid"))
  (delete-file (string-append socket-dir "/pid")))

(append-file ssh-agent-pid (string-append socket-dir "/pid"))
