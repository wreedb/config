#!/usr/bin/env -S guile -s
!#
;; -*- scheme -*- vim:ft=scheme

(use-modules (ice-9 format)
             (ice-9 popen)
             (ice-9 rdelim))

(define (getenv-maybe varname default)
  (or (getenv varname) default))

(define (write-file mode str file)
  (let ((handle (open-file file mode)))
    (display str handle)
    (close-port handle)))

(define (capture command)
  (let* ((in (open-input-pipe command))
         (out (read-string in)))
    (close-pipe in) out))

(define (rm-newlines str)
  (list->string
    (filter
      (lambda (c) (not (char=? c #\newline)))
      (string->list str))))

;; exit if dirmngr is already running
(unless (string-null? (capture "pgrep -x gpg-agent"))
  (display "error: gpg-agent already running\n")
  (exit 1))

(define gnupghome
  (getenv-maybe "GNUPGHOME"
    (string-append (getenv "HOME") "/.local/share/gnupg")))

(when (string-null? (getenv "XDG_RUNTIME_DIR"))
  (display "XDG_RUNTIME_DIR is not set, exiting.\n")
  (exit 1))

(define runtime-dir (getenv "XDG_RUNTIME_DIR"))

(define socket-dir (string-append runtime-dir "/gpg-agent"))

(define socket-file (string-append socket-dir "/socket"))
(define pid-file (string-append socket-dir "/pid"))
(define log-file (string-append socket-dir "/log"))

(unless (file-exists? socket-dir)
  (mkdir socket-dir)
  (chmod socket-dir #o700))

(when (file-exists? pid-file)
  (delete-file pid-file))

(define agent-command
  (format #f "gpg-agent --daemon --log-file ~a --extra-socket ~a"
    log-file
    socket-file))

(write-file "a" "\n---\n" log-file)

(define gpg-agent-output (capture agent-command))

(write-file "w"
  (rm-newlines (capture (format #f "pgrep -u ~a -x gpg-agent" (getlogin))))
  pid-file)
